
剑指 Offer II 026. 重排链表
给定一个单链表 L 的头节点 head ，单链表 L 表示为：

 L0 → L1 → … → Ln-1 → Ln 
请将其重新排列后变为：

L0 → Ln → L1 → Ln-1 → L2 → Ln-2 → …

不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。

 

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode *mid(struct ListNode * head) // z找到中间节点的前一个节点
{
    struct ListNode *slow = head;
    struct ListNode *fast = head;
    while(fast->next && fast->next->next)
    {
        slow = slow ->next;
        fast = fast->next->next;
    }
    return slow;
}
struct ListNode* reverse(struct ListNode *head)
{
    struct ListNode * n1 = NULL;
    struct ListNode * n2 = head;
    while(n2)
    {
        struct ListNode * n3 = n2->next;
        n2 ->next = n1;
        n1 = n2;
        n2 = n3;
    }
    return n1;
}
void reorderList(struct ListNode* head)
{
        struct ListNode *MidNode = mid(head);
        struct ListNode *l2  = MidNode->next;
        l2 = reverse(l2);  //反转后半部分
        MidNode->next = NULL;
        struct ListNode *l1 = head;
        while(l1 && l2)   //链接
        {
            struct ListNode *p1 = l1->next;
            struct ListNode *p2 = l2->next;
            l1->next = l2;
            l1 = p1;
            l2->next = l1;
            l2 = p2;
        }
}
