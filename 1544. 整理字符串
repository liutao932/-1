//  给你一个由大小写英文字母组成的字符串 s 。

一个整理好的字符串中，两个相邻字符 s[i] 和 s[i+1]，其中 0<= i <= s.length-2 ，要满足如下条件:

若 s[i] 是小写字符，则 s[i+1] 不可以是相同的大写字符。
若 s[i] 是大写字符，则 s[i+1] 不可以是相同的小写字符。
请你将字符串整理好，每次你都可以从字符串中选出满足上述条件的 两个相邻 字符并删除，直到字符串整理好为止。

请返回整理好的 字符串 。题目保证在给出的约束条件下，测试样例对应的答案是唯一的。

注意：空字符串也属于整理好的字符串，尽管其中没有任何字符。

 

示例 1：

输入：s = "leEeetcode"
输出："leetcode"
解释：无论你第一次选的是 i = 1 还是 i = 2，都会使 "leEeetcode" 缩减为 "leetcode" 。
示例 2：

输入：s = "abBAcC"
输出：""
解释：存在多种不同情况，但所有的情况都会导致相同的结果。例如：
"abBAcC" --> "aAcC" --> "cC" --> ""
"abBAcC" --> "abBA" --> "aA" --> ""
示例 3：

输入：s = "s"
输出："s"




typedef char StackDataType;
typedef struct stack
{
	StackDataType* a;
	int top;
	int capatity;
}ST;

void InitStack(ST* pc);
void PushStack(ST* pc, StackDataType data);
void PopStack(ST* pc);
StackDataType TopStack(ST* pc);
bool EmptyStack(ST* pc);
void DestroyStack(ST* pc);

void InitStack(ST* pc)
{
	pc->a = NULL;
	pc->top = 0;
	pc->capatity = 0;
}
void PushStack(ST* pc, StackDataType data)
{
	assert(pc);
	if (pc->top == pc->capatity)
	{
		int newcapatiy = pc->capatity == 0 ? 4 : pc->capatity * 2;
		StackDataType* tmp = (StackDataType*)realloc(pc->a, newcapatiy);
		pc->a = tmp;
		pc->capatity = newcapatiy;
	}
	pc->a[pc->top++] = data;
}
void PopStack(ST* pc)
{
	assert(pc);
	assert(pc->top > 0);
	pc->top--;
}
StackDataType TopStack(ST* pc)
{
	assert(pc);
	assert(pc->top > 0);
	return pc->a[pc->top - 1];
}
bool EmptyStack(ST* pc)
{
	assert(pc);
	return pc->top == 0;
}
void DestroyStack(ST* pc)
{
	assert(pc);
	free(pc->a);
	pc->a = NULL;
}
char * makeGood(char * s){
    ST st;
    InitStack(&st);
    char *p =s;
    PushStack(&st,*p);
    p++;
    while(*p)
    {
        if(EmptyStack(&st))
        {
            PushStack(&st,*p);
        }
        else{
                 char top = TopStack(&st);
        if(abs(top - *p) == 32)
        {
            PopStack(&st);
        }
      else
        {
            PushStack(&st,*p);
         }
        }
       
        p++;
    }
    char *str = (char*)malloc(sizeof(char) *100);
    int index =0;
    while(!EmptyStack(&st))
    {
        str[index++] = TopStack(&st);
        PopStack(&st);
    }
    if(index == 0)
    {
        return "";
    }
    str[index++] = '\0';
    int len = strlen(str);
    int left = 0, rigth =len-1;
    while(left < rigth)
    {
        char tmp = str[left];
        str[left++] = str[rigth];
        str[rigth--] = tmp;
    }
    return str;
}
