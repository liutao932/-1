
要求使用原地算法，不能只改变节点内部的值，需要对实际的节点进行交换。

数据范围：链表长度 0 \le n \le 200000≤n≤20000 ，链表中每个节点的值满足 0 \le val \le 10000≤val≤1000

要求：空间复杂度 O(n)O(n) 并在链表上进行操作而不新建链表，时间复杂度 O(n)O(n)
进阶：空间复杂度 O(1)O(1) ， 时间复杂度 O(n)O(n)
示例1
输入：
{1,2,3,4}
复制
返回值：
{1,4,2,3}
复制
说明：
给定head链表1->2->3->4, 重新排列为 1->4->2->3,会取head链表里面的值打印输出 1      
示例2
输入：
{1,2,3,4,5}
复制
返回值：
{1,5,2,4,3}
复制
说明：
给定head链表1->2->3->4->5, 重新排列为 1->5>2->4->3,会取head链表里面的值打印输出    

struct ListNode* Reveser(struct ListNode* head)
{
    struct ListNode* n1 = NULL;
    struct ListNode* n2 = head;
    while(n2)
    {
        struct ListNode* n3 = n2->next;
        n2->next = n1;
        n1 = n2;
        n2 = n3;
    }
    return n1;
}
void reorderList(struct ListNode* head ) {
    if(head == NULL || head->next == NULL)
        return;
    struct ListNode* slow = head, *fast = head;
    while(fast->next != NULL && fast->next->next !=NULL)
    {
        slow  = slow->next;
        fast = fast->next->next;
    }
    struct ListNode* newhead = slow->next;
    slow->next = NULL;
    struct ListNode* ret = Reveser(newhead);
    
    struct ListNode* cur1 = head,*cur2 = ret;
    while(cur1 && cur2)
    {
        struct ListNode* next1 = cur1->next;
        struct ListNode* next2 = cur2->next;
        
        cur1->next = cur2;
        cur2->next = next1;
        cur1 = next1;
        cur2 = next2;
    }
}
