#include<stdio.h>
#include<stdlib.h>
//void EumleRax(int* arr,int len, int k)    //暴力求解
//{
//	while (k--)
//	{
//		int temp = arr[0];
//		int i = 0;
//		for (i = 0; i < len -1; i++)
//		{
//			arr[i] = arr[i + 1];
//		}
//		arr[i] = temp;
//	}
//	
////}
//void reverse(int* arr, int left, int rigth) //交换函数
//{
//	while (left < rigth)
//	{
//		int temp = arr[left];
//		arr[left++] = arr[rigth];
//		arr[rigth--] = temp;
//
//	}
//}
//void EumleRax(int* arr, int len, int k)   //交换3次
//{
//	reverse(arr, 0, k - 1);
//	reverse(arr, k, len - 1);
//	reverse(arr, 0, len - 1);
//}
int min_num(int a, int b)
{
	return a < b ? a : b;
}
void reverse(int* arr, int left, int rigth,int size)
{
	int i = rigth - size + 1;
	while (size--)
	{
		int temp = arr[left];
		arr[left++] = arr[i];
		arr[i++] = temp;
	}
}
int* EumleRax(int* arr, int len, int k)
{
	int Lpart = k;
	int Rpart = len - k;
	int L = 0;
	int R = len - 1;
	int diff = Lpart - Rpart;
	int same = min_num(Lpart, Rpart);
	reverse(arr,L,R,same);
	while (diff != 0)
	{
		if (diff > 0)
		{
			L += same;
			Lpart = diff;
		}
		else
		{
			R -= same;
			Rpart = -diff;
		}
		int same = min_num(Lpart, Rpart);
		int diff = Lpart - Rpart;
		reverse(arr, L, R,same);
	}
	return arr;
}
int main()
{
	int arr[] = { 1,2,3,4,5,6,7 };
	EumleRax(arr,sizeof(arr)/sizeof(int), 4);
	for (int i = 0; i < sizeof(arr) / sizeof(int); i++)
	{
		printf("%d", arr[i]);
	}
}
